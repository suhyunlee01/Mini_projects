<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Canvas</title>
    <style>
        #new-canvas{
            background-color: beige;
        }
    </style>
  </head>
  <body>
    <canvas id="new-canvas" width="500" height="500"></canvas>
    </canvas>
    <script>
        var canvas = document.getElementById('new-canvas');
        var context = canvas.getContext('2d');

        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);

        var isDrawing = false;

        //e는 이벤트 핸들러 함수의 매개변수(이벤트 객체)로, 그 안에는 마우스 클릭이 일어난 위치와 관련된 정보들이 포함되어있음.

        function startDrawing(e){
          isDrawing=true;
          context.beginPath();

          // clientX값은 브라우저 창의 왼쪽 경계를 기준으로 X좌표 값을 알려준다.
          //하지만 canvas내부의 좌표를 알고싶기 때문에, (브라우저 X좌표값) - (브라우저와 캔버스 사이의 값) 을 해주면 캔버스 내부의 x좌표를 구할 수 있다. 
          var x = e.clientX-canvas.offsetLeft; 
          var y = e.clientY-canvas.offsetTop;
          context.moveTo(x, y); // 캔버스의 컨텍스트의 현재 위치를 x와 y로 이동시킴. 그럼 그 후의 시작점이 xy로 설정됨
        }

        function draw(e){
          if(!isDrawing){
            return; // isDrawing이 아닌 경우, 즉 그림이 startDrawing되지 않았을 경우는 draw를 하지 않고 함수 종료
          }
          var x = e.clientX-canvas.offsetLeft; 
          var y = e.clientY-canvas.offsetTop;
          context.lineTo(x, y);
          context.stroke();
        }

        function stopDrawing(e){
          isDrawing=false;
          context.closePath();
        }

    </script>
  </body>
</html>
